// Date: 9/8/2014 9:06:26 PM
// Template version 1.1
// Java generated by Techne
// Keep in mind that you still need to fill in some blanks
// - ZeuX






package com.arzeyt.theDarkness.tower;

import net.minecraft.client.model.ModelBase;
import net.minecraft.client.model.ModelRenderer;
import net.minecraft.entity.Entity;

public class ModelTower extends ModelBase
{
  //fields
    ModelRenderer Base;
    ModelRenderer Arm1;
    ModelRenderer Arm2;
    ModelRenderer Arm3;
    ModelRenderer Arm4;
    
  public ModelTower()
  {
    textureWidth = 64;
    textureHeight = 32;
    
      Base = new ModelRenderer(this, 12, 0);
      Base.addBox(-2F, 0F, -2F, 4, 16, 4);
      Base.setRotationPoint(0F, 8F, 0F);
      Base.setTextureSize(64, 32);
      Base.mirror = true;
      setRotation(Base, 0F, 0F, 0F);
      Arm1 = new ModelRenderer(this, 0, 0);
      Arm1.addBox(0F, 0F, -1F, 4, 1, 2);
      Arm1.setRotationPoint(2F, 8F, 0F);
      Arm1.setTextureSize(64, 32);
      Arm1.mirror = true;
      setRotation(Arm1, 0F, 0F, 0F);
      Arm2 = new ModelRenderer(this, 0, 4);
      Arm2.addBox(-1F, 0F, 0F, 2, 1, 4);
      Arm2.setRotationPoint(0F, 8F, 2F);
      Arm2.setTextureSize(64, 32);
      Arm2.mirror = true;
      setRotation(Arm2, 0F, 0F, 0F);
      Arm3 = new ModelRenderer(this, 0, 10);
      Arm3.addBox(-4F, 0F, -1F, 4, 1, 2);
      Arm3.setRotationPoint(-2F, 8F, 0F);
      Arm3.setTextureSize(64, 32);
      Arm3.mirror = true;
      setRotation(Arm3, 0F, 0F, 0F);
      Arm4 = new ModelRenderer(this, 0, 14);
      Arm4.addBox(-1F, 0F, -4F, 2, 1, 4);
      Arm4.setRotationPoint(0F, 8F, -2F);
      Arm4.setTextureSize(64, 32);
      Arm4.mirror = true;
      setRotation(Arm4, 0F, 0F, 0F);
  }
  
  public void render(Entity entity, float f, float f1, float f2, float f3, float f4, float f5)
  {
    super.render(entity, f, f1, f2, f3, f4, f5);
    setRotationAngles(f, f1, f2, f3, f4, f5, entity);
    Base.render(f5);
    Arm1.render(f5);
    Arm2.render(f5);
    Arm3.render(f5);
    Arm4.render(f5);
  }
  
  private void setRotation(ModelRenderer model, float x, float y, float z)
  {
    model.rotateAngleX = x;
    model.rotateAngleY = y;
    model.rotateAngleZ = z;
  }
  
  public void setRotationAngles(float f, float f1, float f2, float f3, float f4, float f5, Entity entity)
  {
    super.setRotationAngles(f, f1, f2, f3, f4, f5, entity);
  }
  
  public void renderModel(float f){
	  Base.render(f);
	    Arm1.render(f);
	    Arm2.render(f);
	    Arm3.render(f);
	    Arm4.render(f);
  }

  public boolean transitionToEmpty2(TileEntityTower te, long animationOffset){
	  final double ROTATE_SPEED = 0.001;
	  final double STARTZ = 0;
	  final double STARTX = 0;
	  long time = (System.currentTimeMillis() - animationOffset) % 40000L;
	  //long time = System.nanoTime();
	  
	 // double move = time*ROTATE_SPEED;
	  boolean complete=true;
	  
	  if(Arm1.rotateAngleZ>toRadians(-90)){			
		  Arm1.rotateAngleZ= (float) (STARTZ-time*ROTATE_SPEED);
			complete=false;
			System.out.println("rotation: "+(STARTZ-time*ROTATE_SPEED));
		}
	  if(Arm4.rotateAngleX>toRadians(-90)){
			
			Arm4.rotateAngleX = (float) (STARTX-time*ROTATE_SPEED);
			complete=false;
			
		}
	  if(Arm3.rotateAngleZ<toRadians(90)){
			Arm3.rotateAngleZ = (float) (STARTZ+time*ROTATE_SPEED);
			complete=false;
			
		}
	  if(Arm2.rotateAngleX<toRadians(90)){
			Arm2.rotateAngleX = (float) (STARTX+time*ROTATE_SPEED);
			complete=false;
		}
	  return complete;
  }
  
  public boolean transitionToLight2(TileEntityTower te, long animationOffset){
	  final double ROTATE_SPEED = 0.001;
	  final double ARM14START = toRadians(-90);
	  final double ARM23START = toRadians(90);
	  long time = (System.currentTimeMillis() - animationOffset) % 40000L;
	  
	  boolean complete=true;
	  
	  if(Arm1.rotateAngleZ<toRadians(0)){			
		  Arm1.rotateAngleZ= (float) (ARM14START+time*ROTATE_SPEED);
			complete=false;
			
			System.out.println("angle z: "+(ARM14START+time*ROTATE_SPEED));
			
		}
	  if(Arm4.rotateAngleX<toRadians(0)){
			
			Arm4.rotateAngleX = (float) (ARM14START+time*ROTATE_SPEED);
			complete=false;
			
		}
	  if(Arm3.rotateAngleZ>toRadians(0)){
			Arm3.rotateAngleZ = (float) (ARM23START-time*ROTATE_SPEED);
			complete=false;
			
		}
	  if(Arm2.rotateAngleX>toRadians(0)){
			Arm2.rotateAngleX = (float) (ARM23START-time*ROTATE_SPEED);
			complete=false;
		}
	  return complete;
  }

	public void renderEmpty() {
		this.Arm1.rotateAngleZ = toRadians(-90);
		this.Arm4.rotateAngleX = toRadians(-90);
		this.Arm3.rotateAngleZ = toRadians(90);
		this.Arm2.rotateAngleX = toRadians(90);
	}
	
	

	public void renderFull() {
		this.Arm1.rotateAngleZ = toRadians(0);
		this.Arm4.rotateAngleX = toRadians(0);
		this.Arm3.rotateAngleZ = toRadians(0);
		this.Arm2.rotateAngleX = toRadians(0);
		
	}
	
	public float toRadians(float degrees){
		return (float) (degrees*(Math.PI/180));
    }

	
}
